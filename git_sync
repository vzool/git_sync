#!/usr/bin/env bash
# git_sync - Sync many repositories from any Git Server to another Git Server
# Author: Abdelaziz Elrashed (@vzool)
# Version: 0.0.22-dev
# Date: 2024-01-08
# URL: https://github.com/vzool/git_sync
# License: MIT

# ~/.git_sync/config (file)
# ~/.git_sync/list (file)
# ~/.git_sync/repo (directory)

DEFAULT_INSTALL_LOCATION="$HOME/.local/git_sync"
DEFAULT_LOCATION="$HOME/.git_sync" # default location for all files
DEFAULT_CONFIG="$DEFAULT_LOCATION/config" # default config file path
DEFAULT_LIST="$DEFAULT_LOCATION/list" # default repositories list file path
DEFAULT_REPO="$DEFAULT_LOCATION/repo" # default repositories directory path

# Check dependencies by loop through all required commands and check if they are installed

for cmd in curl git sed jq
do
  if ! command -v $cmd &> /dev/null
  then
    echo "[ERROR] `$cmd` command could not be found, please install it!"
    exit 1
  fi
done

plugins=()
cd "$DEFAULT_INSTALL_LOCATION"
for plugin in *_plugin.sh; do
  [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Loading $plugin..."
  . "$plugin" #|| echo "[ERROR] Failed to load $plugin!" && continue
  name=$(echo $plugin | sed 's/_plugin.sh//')
  [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Loaded ($name) plugin $(${name}_plugin_version)!"
  plugins+=($name)
done

KNOWN_EDITORS="nano vim emacs vi pico code"
AVAILABLE_EDITORS=()
for editor in $KNOWN_EDITORS; do
  if command -v $editor &> /dev/null
  then
    AVAILABLE_EDITORS+=($editor)
  fi
done

[[ "$1" == "-v" || "$2" == "-v" || "$1" == "plugins" ]] && echo "-----------------------------------------------"
[[ "$1" == "-v" || "$2" == "-v" || "$1" == "plugins" ]] && echo "Plugins: ${plugins[@]}"
[[ "$1" == "-v" || "$2" == "-v" || "$1" == "plugins" ]] && echo "-----------------------------------------------"

if [ "$1" == "plugins" ]
then
  exit 0
fi

if command -v dialog >/dev/null 2>&1; then
  # dialog is available (likely not macOS)
  DIALOG="dialog"
elif command -v whiptail &> /dev/null; then
  # whiptail is likely available (fallback for macOS)
  DIALOG="whiptail"
else
  echo "[ERROR] Neither dialog nor whiptail found. Please install one of them."
  exit 1
fi

if [[ "$1" == "-h" || "$1" == "-help" || "$1" == "help" ]]
then
  echo "git_sync - Sync many repositories from any Git Server to another Git Server"
  echo "Usage: git_sync [OPTION]"
  echo "  -y              do not ask for confirmation"
  echo "  -v              show verbose output"
  echo "  -h, help        display this help and exit"
  echo "  version         output version information and exit"
  echo "  env             show loaded variables from config file and exit"
  echo "  config          edit config file"
  echo "  init            initialize the application based on user input"
  echo "  size            show size of repositories locally"
  echo "  list            edit the list of repositories to sync"
  echo "  plugins         list all available plugins"
  echo "  install         install/update the application"
  echo "  uninstall       uninstall the application"
  exit 0
fi

if [ "$1" == "version" ]
then
  echo "============================================================================="
  echo "git_sync version 0.0.22-dev"
  echo "-----------------------------------------------------------------------------"
  echo "Created by: Abdelaziz Elrashed (c) 2024"
  echo "============================================================================="
  echo "<3 Free Free Palestine, From the River to the Sea, Palestine Will be Free <3"
  echo "============================================================================="
  exit 0
fi

# install command, create default files and exit
if [ "$1" == "install" ]
then
  ./install.sh
  exit 0
fi

# uninstall command, remove default files and exit
if [ "$1" == "uninstall" ]
then
  ./install.sh remove
  exit 0
fi

# check if repo directory exists, if not, create it
[ ! -d $DEFAULT_REPO ] && mkdir -p $DEFAULT_REPO

# init command, create config file based on user input and exit

if [ "$1" == "init" ]
then

  ACTION="Initializer"

  # if file exists, load all variables from it
  [ -f $DEFAULT_CONFIG ] && source $DEFAULT_CONFIG 2> /dev/null # load the environment variables from config file
  OLD_TOKEN="$TOKEN"
  OLD_GIT_USER="$USER"
  OLD_HTTP_HOST="http://192.168.88.248:3000"
  OLD_SSH_HOST="git@192.168.88.248"
  OLD_SSH_PORT="22"
  OLD_LIST="$DEFAULT_LIST"
  OLD_DIR="$DEFAULT_REPO"

  # check if config file already exists, if yes, load all variables from it
  if [ -f $DEFAULT_CONFIG ]
  then
    ACTION="Updater"
    if [ -z "$GIT_USER" ] 
    then
      echo "[ERROR] GIT_USER not found, add it to config file!"
      OLD_GIT_USER="$USER"
    else
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "[INFO] GIT_USER found, skipping it!"
      OLD_GIT_USER="$GIT_USER"
    fi
    if [ -z "$HTTP_HOST" ]
    then
      echo "[ERROR] HTTP_HOST not found, add it to config file!"
      OLD_HTTP_HOST="http://192.168.88.248:3000"
    else
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "[INFO] HTTP_HOST found, skipping it!"
      OLD_HTTP_HOST="$HTTP_HOST"
    fi
    if [ -z "$SSH_HOST" ]
    then
      echo "[ERROR] SSH_HOST not found, add it to config file!"
      OLD_SSH_HOST="git@192.168.88.248"
    else
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "[INFO] SSH_HOST found, skipping it!"
      OLD_SSH_HOST="$SSH_HOST"
    fi
    if [ -z "$SSH_PORT" ]
    then
      echo "[ERROR] SSH_PORT not found, add it to config file!"
      OLD_SSH_PORT="22"
    else
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "[INFO] SSH_PORT found, skipping it!"
      OLD_SSH_PORT="$SSH_PORT"
    fi
    if [ -z "$LIST" ]
    then
      echo "[ERROR] LIST not found, add it to config file!"
      OLD_LIST="$DEFAULT_LIST"
    else
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "[INFO] LIST found, skipping it!"
      OLD_LIST="$LIST"
    fi
    if [ -z "$DIR" ] 
    then
      echo "[ERROR] DIR not found, add it to config file!"
      OLD_DIR="$DEFAULT_REPO"
    else
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "[INFO] DIR found, skipping it!"
      OLD_DIR="$DIR"
    fi
  fi

  if (! $DIALOG --title "git_sync $ACTION" --yesno "git_sync $ACTION will remove your current $DEFAULT_CONFIG file and create a new one based on your provided answers.\n\nDo you want to process with the $ACTION?" 12 78);
  then
    exit
  fi

  echo "####################################################################" > $DEFAULT_CONFIG
  echo "# git_sync configuration file" >> $DEFAULT_CONFIG
  echo "# Created by ($USER) @ [$(date)]" >> $DEFAULT_CONFIG
  echo "####################################################################" >> $DEFAULT_CONFIG

  # TARGET #

  TARGET=$($DIALOG --title "git_sync $ACTION - Target Git Server" --menu "Please choose the target server to which you want to transfer all your repositories into" 15 60 6 $(for plugin in "${plugins[@]}"; do echo "$plugin" "server_rest_api_${plugin}_$(${plugin}_plugin_version)"; done) 3>&1 1>&2 2>&3)
  while [[ -z "$TARGET" ]];
  do
    TARGET=$($DIALOG --title "git_sync $ACTION - Target Git Server" --menu "Please choose the target server to which you want to transfer all your repositories into" 15 60 6 $(for plugin in "${plugins[@]}"; do echo "$plugin" "server_rest_api_${plugin}_$(${plugin}_plugin_version)"; done) 3>&1 1>&2 2>&3)
  done
  echo "TARGET=\"${TARGET}\"" >> $DEFAULT_CONFIG

  # MODE #

  MODE=$($DIALOG --title "git_sync $ACTION - Target Namespacing Mode" --menu "Please choose the mode to which you want to transfer all your repositories into:" 15 60 6 $(for mode in "user" "organization"; do echo "$mode" "${mode}_mode"; done) 3>&1 1>&2 2>&3)
  while [[ -z "$MODE" ]];
  do
    MODE=$($DIALOG --title "git_sync $ACTION - Target Namespacing Mode" --menu "Please choose the mode to which you want to transfer all your repositories into:" 15 60 6 $(for mode in "user" "organization"; do echo "$mode" "${mode}_mode"; done) 3>&1 1>&2 2>&3)
  done
  echo "MODE=\"${MODE}\"" >> $DEFAULT_CONFIG

  # EDITOR #

  EDITOR=$($DIALOG --title "git_sync $ACTION - Editor" --menu "Which editor would you prefer to use from the available options on your system?" 15 60 6 $(for editor in "${AVAILABLE_EDITORS[@]}"; do echo "$editor" "$editor"; done) 3>&1 1>&2 2>&3)
  while [[ -z "$EDITOR" ]];
  do
    EDITOR=$($DIALOG --title "git_sync $ACTION - Editor" --menu "Which editor would you prefer to use from the available options on your system?" 15 60 6 $(for editor in "${AVAILABLE_EDITORS[@]}"; do echo "$editor" "$editor"; done) 3>&1 1>&2 2>&3)
  done
  echo "EDITOR=\"${EDITOR}\"" >> $DEFAULT_CONFIG

  # TOKEN #

  permissions=$(${TARGET}_required_permissions)

  TOKEN=$($DIALOG --title "git_sync $ACTION - Access token" --inputbox "Provide access token for your Account.\n\n- Required Permissions: [$permissions]\n " 12 78 $OLD_TOKEN 3>&1 1>&2 2>&3)
  while [[ -z "$TOKEN" ]];
  do
    TOKEN=$($DIALOG --title "git_sync $ACTION - Access token" --inputbox "Provide access token for your Account.\n\n- Required Permissions: [$permissions]\n " 12 78 $OLD_TOKEN 3>&1 1>&2 2>&3)
  done
  echo "TOKEN=\"${TOKEN}\"" >> $DEFAULT_CONFIG

  # GIT_USER #

  GIT_USER=$($DIALOG --title "git_sync $ACTION - Git Username" --inputbox "Provide your username on Gitea Server." 12 78 $OLD_GIT_USER 3>&1 1>&2 2>&3)
  while [[ -z "$GIT_USER" ]];
  do
    GIT_USER=$($DIALOG --title "git_sync $ACTION - Git Username" --inputbox "Provide your username on Gitea Server." 12 78 $OLD_GIT_USER 3>&1 1>&2 2>&3)
  done
  echo "GIT_USER=\"${GIT_USER}\"" >> $DEFAULT_CONFIG

  # HTTP_HOST #
  
  HTTP_HOST=$($DIALOG --title "git_sync $ACTION - Gitea HTTP HOST" --inputbox "Provide IP or host for your Gitea HTTP Server e.g.(git@example.com)." 12 78 $OLD_HTTP_HOST 3>&1 1>&2 2>&3)
  while [[ -z "$HTTP_HOST" ]];
  do
    HTTP_HOST=$($DIALOG --title "git_sync $ACTION - Gitea HTTP HOST" --inputbox "Provide IP or host for your Gitea HTTP Server e.g.(git@example.com)." 12 78 $OLD_HTTP_HOST 3>&1 1>&2 2>&3)
  done
  echo "HTTP_HOST=\"${HTTP_HOST}\"" >> $DEFAULT_CONFIG

  # SSH_HOST #

  SSH_HOST=$($DIALOG --title "git_sync $ACTION - Gitea SSH HOST" --inputbox "Provide IP or host for your Gitea SSH Server." 12 78 $OLD_SSH_HOST 3>&1 1>&2 2>&3)
  while [[ -z "$SSH_HOST" ]];
  do
    SSH_HOST=$($DIALOG --title "git_sync $ACTION - Gitea SSH HOST" --inputbox "Provide IP or host for your Gitea SSH Server." 12 78 $OLD_SSH_HOST 3>&1 1>&2 2>&3)
  done
  echo "SSH_HOST=\"${SSH_HOST}\"" >> $DEFAULT_CONFIG

  # SSH_PORT #

  SSH_PORT=$($DIALOG --title "git_sync $ACTION - Gitea SSH PORT" --inputbox "Provide Port for your Gitea SSH Server." 12 78 $OLD_SSH_PORT 3>&1 1>&2 2>&3)
  while [[ !( "$SSH_PORT" =~ ^[-]?[0-9]+ && "$SSH_PORT" -ge 0 && "$SSH_PORT" -le 65535 ) ]];
  do
    SSH_PORT=$($DIALOG --title "git_sync $ACTION - Gitea SSH PORT" --inputbox "Provide Port for your Gitea SSH Server." 12 78 $OLD_SSH_PORT 3>&1 1>&2 2>&3)
  done
  echo "SSH_PORT=\"${SSH_PORT}\"" >> $DEFAULT_CONFIG

  # LIST #

  LIST=$($DIALOG --title "git_sync $ACTION - Repositories List File" --inputbox "Provide file list for your repositories.\n\ncreate it and add the repositories to sync in one per line in SSH \`git@xxxxxx:user/xxxxxx.git\` format!" 12 78 $OLD_LIST 3>&1 1>&2 2>&3)
  while [[ -z "$LIST" ]];
  do
    LIST=$($DIALOG --title "git_sync $ACTION - Repositories List File" --inputbox "Provide file list for your repositories.\n\ncreate it and add the repositories to sync in one per line in SSH \`git@xxxxxx:user/xxxxxx.git\` format!" 12 78 $OLD_LIST 3>&1 1>&2 2>&3)
  done
  echo "LIST=\"${LIST}\"" >> $DEFAULT_CONFIG

  # DIR #

  DIR=$($DIALOG --title "git_sync $ACTION - Local Repositories Directory" --inputbox "Provide a local directory for your repositories.\n\nThis directory will be stage for all your repository to sync locally then push/sync to Gitea Server." 12 78 $OLD_DIR 3>&1 1>&2 2>&3)
  while [[ -z "$DIR" ]];
  do
    DIR=$($DIALOG --title "git_sync $ACTION - Local Repositories Directory" --inputbox "Provide a local directory for your repositories.\n\nThis directory will be stage for all your repository to sync locally then push/sync to Gitea Server." 12 78 $OLD_DIR 3>&1 1>&2 2>&3)
  done
  echo "DIR=\"${DIR}\"" >> $DEFAULT_CONFIG

  exit 0
fi

SELECTED_TOKEN="$TOKEN"
SELECTED_GIT_USER="$GIT_USER"
SELECTED_HTTP_HOST="$HTTP_HOST"
SELECTED_SSH_HOST="$SSH_HOST"
SELECTED_SSH_PORT="$SSH_PORT"
SELECTED_LIST="$LIST"
SELECTED_DIR="$DIR"

source $ENV 2> /dev/null # load the environment variables from selected config file

# if optional variables not passed, set to default values
[ -z "$ENV" ] && ENV="$DEFAULT_CONFIG" && source $ENV 2> /dev/null # set the environment
[ -z "$TARGET" ] && TARGET="gitea" # set the target server
[ -z "$MODE" ] && MODE="user" # set the mode
[ -z "$EDITOR" ] && EDITOR="nano" # set the editor
[ -z "$TOKEN" ] && echo "[ERROR] TOKEN not found, add it to config file!" && exit 1 # set the list of repositories to sync
[ -z "$GIT_USER" ] && echo "[ERROR] GIT_USER not found, add it to config file!" && exit 1 # set the list of repositories to sync
[ -z "$HTTP_HOST" ] && echo "[ERROR] HTTP_HOST not found, add it to config file!" && exit 1 # set the list of repositories to sync
[ -z "$SSH_HOST" ] && echo "[ERROR] SSH_HOST not found, add it to config file!" && exit 1 # set the list of repositories to sync
[ -z "$SSH_PORT" ] && SSH_PORT="22" # set the ssh port
[ -z "$LIST" ] && LIST="$DEFAULT_LIST" # set the list of repositories to sync
[ -z "$DIR" ] && DIR="$DEFAULT_REPO" # set the directory to store repositories locally

# check if SELECTED_LIST is not empty, then forced to use it

[ ! -z "$SELECTED_TOKEN" ] && TOKEN="$SELECTED_TOKEN"
[ ! -z "$SELECTED_GIT_USER" ] && GIT_USER="$SELECTED_GIT_USER"
[ ! -z "$SELECTED_HTTP_HOST" ] && HTTP_HOST="$SELECTED_HTTP_HOST"
[ ! -z "$SELECTED_SSH_HOST" ] && SSH_HOST="$SELECTED_SSH_HOST"
[ ! -z "$SELECTED_SSH_PORT" ] && SSH_PORT="$SELECTED_SSH_PORT"
[ ! -z "$SELECTED_LIST" ] && LIST="$SELECTED_LIST"
[ ! -z "$SELECTED_DIR" ] && DIR="$SELECTED_DIR"

# create LIST if not exists
[ ! -d $DIR ] && mkdir -p $DIR

# config command, show loaded variables from config file and exit

if [ "$1" == "env" ]
then
  # Show loaded variables from config file
  echo "===================================================="
  echo "================ LOADED ENVIRONMENT ================"
  echo "===================================================="
  echo "ENV: $ENV"
  echo "TARGET: $TARGET"
  echo "MODE: $MODE"
  echo "EDITOR: $EDITOR"
  a="$TOKEN"; \
  b="${a:3:$((${#a}-6))}"; \
  echo "TOKEN: ${a:0:3}${b//?/*}${a:(-3)} (hidden)"
  echo "GIT_USER: $GIT_USER"
  echo "HTTP_HOST: $HTTP_HOST"
  echo "SSH_HOST: $SSH_HOST"
  echo "SSH_PORT: $SSH_PORT"
  echo "LIST: $LIST"
  echo "DIR: $DIR"
  echo "===================================================="
  exit 0
fi

# show size of repositories locally and exit
if [ "$1" == "size" ]
then
  echo "===================================================="
  du -sh $DIR
  echo "----------------------------------------------------"
  du -sh $DIR/*
  echo "===================================================="
  exit 0
fi

if [[ "$1" == "list" || "$1" == "config" ]]
then
  if [ ${#AVAILABLE_EDITORS[@]} -eq 0 ]
  then
    echo "[ERROR] No editor found, please install one of the following editors: $KNOWN_EDITORS"
    exit 1
  fi
fi

# edit the list of repositories to sync
if [ "$1" == "list" ]
then
  $EDITOR $LIST
  exit 0
fi

# edit config file
if [ "$1" == "config" ]
then
  $EDITOR $ENV
  exit 0
fi

# if list list file not found in provided path, exit
[ ! -f $LIST ] && echo "[ERROR] File [$LIST] not found, create it and add the repositories to sync in one per line in SSH \`git@xxxxxx:user/xxxxxx.git\` format!" && exit 1

# let the user know what is going to happen

echo "This script will clone all repositories listed in list into [$DIR] locally and push/sync them to [$SSH_HOST]."

# check if confirmed flag is set, if not, ask for confirmation
if [ "$1" != "-y" ]
then
    echo "Press any key to continue or CTRL+C to abort..."
    read -n 1 -s
fi

# if directory does not exist, create it
[ ! -d $DIR ] && mkdir -p $DIR

# check if List file is empty
if [ ! -s $LIST ]
then
    echo "[ERROR] File [$LIST] is empty, add the repositories to in you want to push/sync to Gitea Server in SSH \`git@xxxxxx:user/xxxxxx.git\` format!"
    exit 1
fi

cd $DIR

index=0
count=$(wc -l < $LIST)

for repo in `cat $LIST`
do

  index=$((index+1))

  echo "[$index/$count] $repo"

  # extract domain name with handle from repo url
  DOMAIN_NAME=$(echo $repo | sed 's/.*@\(.*\):.*/\1/')
  GIT_HANDLE=$(echo $repo | sed 's/.*:\(.*\)\/.*/\1/')
  DOMAIN_NAME="$GIT_HANDLE.$DOMAIN_NAME"
  [[ "$1" == "-v" || "$2" == "-v" ]] && echo "DOMAIN_NAME: $DOMAIN_NAME"

  mkdir -p $DOMAIN_NAME
  cd $DOMAIN_NAME

  REPOSITORY_NAME=`basename "$repo" | sed 's/\.git$//'`
  TARGET_DOMAIN_NAME="$DOMAIN_NAME"
  TARGET_REPOSITORY_NAME="$REPOSITORY_NAME"
  if [ -d "$REPOSITORY_NAME.git" ]
  then

    [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Sync [$REPOSITORY_NAME]..."
    cd "$REPOSITORY_NAME.git"
    git fetch --all
    git fetch --tags
    cd ..

  else

    [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Cloning [$REPOSITORY_NAME]..."
    git clone --mirror --bare $repo
    
  fi

  # check mode

  if [ "$MODE" == "user" ]
  then

    # User Mode

    TARGET_DOMAIN_NAME="$GIT_USER"
    TARGET_REPOSITORY_NAME="$REPOSITORY_NAME.$DOMAIN_NAME"

    echo "TARGET_REPOSITORY_NAME: $TARGET_REPOSITORY_NAME"

    # check if user can create repositories with selected plugin

    if [ "$(${TARGET}_user_can_create_repo_flag)" == "true" ]
    then
      [[ "$1" == "-v" || "$2" == "-v" ]] &&  echo "User [$GIT_USER] can create repositories with selected plugin [$TARGET], checking if repository [$TARGET_REPOSITORY_NAME] exists..."
      # server api to check if repository exists in user
      response=$(${TARGET}_check_repository $GIT_USER $TARGET_REPOSITORY_NAME)
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Response: $response"

      if [ $response -eq 404 ]
      then
        [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Repository [$TARGET_REPOSITORY_NAME] on Gitea Server not found, creating it..."
        
        response=$(${TARGET}_user_create_repository $GIT_USER $TARGET_REPOSITORY_NAME)
        [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Response: $response"
        [ $response -ne 201 ] && echo "[ERROR] Creating repository [$TARGET_REPOSITORY_NAME] on Gitea Server failed!" && exit 1

      else
        [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Repository [$TARGET_REPOSITORY_NAME] on Gitea Server found, skipping it!"
      fi
    else
      [[ "$1" == "-v" || "$2" == "-v" ]] &&  echo "User [$GIT_USER] can not create repositories with selected plugin [$TARGET], ignoring create repository!"
    fi

  elif [ "$MODE" == "organization" ] # Organization Mode
  then
    
    # server api to check if organization exists

    response=$(${TARGET}_check_organization $DOMAIN_NAME)
    [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Response: $response"

    # if organization not found, create it

    if [ $response -eq 404 ]
    then
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Organization [$DOMAIN_NAME] on Gitea Server not found, creating it..."
      response=$(${TARGET}_create_organization $DOMAIN_NAME)
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Response: $response"
      [ $response -ne 201 ] && echo "[ERROR] Creating organization [$DOMAIN_NAME] on Gitea Server failed!" && exit 1
    else
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Organization [$DOMAIN_NAME] on Gitea Server found, skipping it!"
    fi
    
    # server api to check if repository exists in organization

    response=$(${TARGET}_check_repository $DOMAIN_NAME $TARGET_REPOSITORY_NAME)
    [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Response: $response"

    if [ $response -eq 404 ]
    then
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Repository [$TARGET_REPOSITORY_NAME] on Gitea Server not found, creating it..."
      
      response=$(${TARGET}_organization_create_repository $DOMAIN_NAME $TARGET_REPOSITORY_NAME)
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Response: $response"
      [ $response -ne 201 ] && echo "[ERROR] Creating repository [$TARGET_REPOSITORY_NAME] on Gitea Server failed!" && exit 1

    else
      [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Repository [$TARGET_REPOSITORY_NAME] on Gitea Server found, skipping it!"
    fi

  else
    echo "[ERROR] Unknown mode [$MODE]!"
    exit 1
  fi
  cd $REPOSITORY_NAME.git
  # if failed to enter the directory
  if [ $? -ne 0 ]
  then
    echo "[ERROR] Failed to enter the directory [$REPOSITORY_NAME.git]!"
    # print current working directory
    echo "[DEBUG] pwd: $(pwd)"
    # list all repositories in the current working directory
    echo "[DEBUG] ls: $(ls)"
    exit 1
  fi
  # check if [plugin]_remote_origin is set, used otherwise use default execution path
  if [ ! -z "$(type -t ${TARGET}_remote_origin)" ] && [ "$(type -t ${TARGET}_remote_origin)" = function ]
  then
    [[ "$1" == "-v" || "$2" == "-v" ]] && echo "Unusual remote origin found[$(${TARGET}_remote_origin)], skipping default path!"
    # if [plugin]_custom_push_updates is set then use it, otherwise show an error message with the plugin implementation is incomplete
    if [ ! -z "$(type -t ${TARGET}_custom_push_updates)" ] && [ "$(type -t ${TARGET}_custom_push_updates)" = function ]
    then
      ${TARGET}_custom_push_updates
    else
      echo "[ERROR] [${TARGET}_custom_push_updates] function not found, implemention is incomplete within ($TARGET) plugin!"
      exit 1
    fi
  else  
    export GIT_SSH_COMMAND="ssh -oPort=$SSH_PORT" # set the selected ssh port
    git push --all $SSH_HOST:$TARGET_DOMAIN_NAME/$TARGET_REPOSITORY_NAME.git
    git push --tags $SSH_HOST:$TARGET_DOMAIN_NAME/$TARGET_REPOSITORY_NAME.git
    export GIT_SSH_COMMAND="ssh -oPort=22" # to reset the ssh default port
  fi
  cd ../..
done
